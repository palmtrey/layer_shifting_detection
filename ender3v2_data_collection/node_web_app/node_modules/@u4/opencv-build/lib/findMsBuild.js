"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMsBuild = void 0;
const npmlog_1 = __importDefault(require("npmlog"));
const utils_js_1 = require("./utils.js");
const glob_1 = __importDefault(require("glob"));
const util_1 = require("util");
/**
 * @returns take the last MSBuild.exe version in PROGRAMFILES
 */
async function findMSBuild() {
    const pblob = (0, util_1.promisify)(glob_1.default);
    const progFiles = new Set([process.env.programfiles, process.env.ProgramW6432, process.env['programfiles(x86)']]);
    const matches = [];
    for (const progFile of progFiles) {
        if (progFile) {
            const reg = `${progFile.replace(/\\/g, '/')}/Microsoft Visual Studio/*/*/MSBuild/*/Bin/MSBuild.exe`;
            for (const m of await pblob(reg, {}))
                matches.push(m);
        }
    }
    matches.sort();
    if (!matches.length) {
        return Promise.reject('no Microsoft Visual Studio found in program files directorys');
    }
    if (matches.length > 1) {
        npmlog_1.default.warn('find-msbuild', `find ${(0, utils_js_1.formatNumber)('' + matches.length)} MSBuild version: [${matches.map(path => (0, utils_js_1.light)(path)).join(', ')}]`);
    }
    npmlog_1.default.silly('find-msbuild', matches.join(', '));
    const selected = matches[matches.length - 1];
    const txt = await (0, utils_js_1.execFile)(selected, ['/version']);
    const m = txt.match(/(\d+)\.\d+/);
    if (!m)
        return Promise.reject('fail to get MSBuild.exe version number');
    const build = {
        path: selected,
        version: Number(m[1]),
    };
    npmlog_1.default.silly('find-msbuild', 'using following msbuild:');
    npmlog_1.default.silly('find-msbuild', 'version:', build.version);
    npmlog_1.default.silly('find-msbuild', 'path:', build.path);
    return build;
}
async function findMsBuild() {
    return await findMSBuild();
}
exports.findMsBuild = findMsBuild;
//# sourceMappingURL=findMsBuild.js.map